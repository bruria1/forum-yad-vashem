//
// Default status colors
// override these in _custom.scss
//
$color-primary: #337ab7 !default;
$color-success: #5cb85c !default;
$color-info: #5bc0de !default;
$color-warning: #f0ad4e !default;
$color-error: #d9534f !default;

//
// Globally used variables
// override these in _custom.scss
//
$border-radius: 2px !default;

//
// Globally used mixins
//


// appearance is not defined for autoprefixer in caniuse,
// so we need a mixin for it
@mixin bear-appearance($appearance) {
  -webkit-appearance: $appearance;
  -moz-appearance: $appearance;
  appearance: $appearance;
}

// https://gist.github.com/webgefrickel/4530526
// usage:
// @include rem(font-size, 16px)
// @include rem(margin, 0 auto 10px)
// @include rem(padding, inherit)
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $default-browser-font-size: 10px;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $default-browser-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if $value == auto or $value == inherit {
      // auto or inherit - don't add px or rem
      $px-values: join($px-values, $value);
      $rem-values: join($rem-values, $value);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $default-browser-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}